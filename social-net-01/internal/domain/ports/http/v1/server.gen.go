// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(c *gin.Context, userId UserId)

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(c *gin.Context, userId UserId)

	// (PUT /friend/delete/{user_id})
	PutFriendDeleteUserId(c *gin.Context, userId UserId)

	// (PUT /friend/set/{user_id})
	PutFriendSetUserId(c *gin.Context, userId UserId)

	// (POST /login)
	PostLogin(c *gin.Context)

	// (POST /post/create)
	PostPostCreate(c *gin.Context)

	// (PUT /post/delete/{id})
	PutPostDeleteId(c *gin.Context, id PostId)

	// (GET /post/feed)
	GetPostFeed(c *gin.Context, params GetPostFeedParams)

	// (GET /post/get/{id})
	GetPostGetId(c *gin.Context, id PostId)

	// (PUT /post/update)
	PutPostUpdate(c *gin.Context)

	// (GET /user/get/{id})
	GetUserGetId(c *gin.Context, id UserId)

	// (POST /user/register)
	PostUserRegister(c *gin.Context)

	// (GET /user/search)
	GetUserSearch(c *gin.Context, params GetUserSearchParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetDialogUserIdList operation middleware
func (siw *ServerInterfaceWrapper) GetDialogUserIdList(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDialogUserIdList(c, userId)
}

// PostDialogUserIdSend operation middleware
func (siw *ServerInterfaceWrapper) PostDialogUserIdSend(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostDialogUserIdSend(c, userId)
}

// PutFriendDeleteUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendDeleteUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutFriendDeleteUserId(c, userId)
}

// PutFriendSetUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendSetUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutFriendSetUserId(c, userId)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// PostPostCreate operation middleware
func (siw *ServerInterfaceWrapper) PostPostCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPostCreate(c)
}

// PutPostDeleteId operation middleware
func (siw *ServerInterfaceWrapper) PutPostDeleteId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPostDeleteId(c, id)
}

// GetPostFeed operation middleware
func (siw *ServerInterfaceWrapper) GetPostFeed(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostFeedParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostFeed(c, params)
}

// GetPostGetId operation middleware
func (siw *ServerInterfaceWrapper) GetPostGetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostGetId(c, id)
}

// PutPostUpdate operation middleware
func (siw *ServerInterfaceWrapper) PutPostUpdate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPostUpdate(c)
}

// GetUserGetId operation middleware
func (siw *ServerInterfaceWrapper) GetUserGetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserGetId(c, id)
}

// PostUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostUserRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserRegister(c)
}

// GetUserSearch operation middleware
func (siw *ServerInterfaceWrapper) GetUserSearch(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSearchParams

	// ------------- Required query parameter "first_name" -------------

	if paramValue := c.Query("first_name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument first_name is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "first_name", c.Request.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter first_name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "last_name" -------------

	if paramValue := c.Query("last_name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument last_name is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "last_name", c.Request.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_name: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserSearch(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/dialog/:user_id/list", wrapper.GetDialogUserIdList)
	router.POST(options.BaseURL+"/dialog/:user_id/send", wrapper.PostDialogUserIdSend)
	router.PUT(options.BaseURL+"/friend/delete/:user_id", wrapper.PutFriendDeleteUserId)
	router.PUT(options.BaseURL+"/friend/set/:user_id", wrapper.PutFriendSetUserId)
	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
	router.POST(options.BaseURL+"/post/create", wrapper.PostPostCreate)
	router.PUT(options.BaseURL+"/post/delete/:id", wrapper.PutPostDeleteId)
	router.GET(options.BaseURL+"/post/feed", wrapper.GetPostFeed)
	router.GET(options.BaseURL+"/post/get/:id", wrapper.GetPostGetId)
	router.PUT(options.BaseURL+"/post/update", wrapper.PutPostUpdate)
	router.GET(options.BaseURL+"/user/get/:id", wrapper.GetUserGetId)
	router.POST(options.BaseURL+"/user/register", wrapper.PostUserRegister)
	router.GET(options.BaseURL+"/user/search", wrapper.GetUserSearch)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lUVep/PfAAAA///QqcQm6y0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
